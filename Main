import shutil
from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename, askdirectory
import os
from PIL import Image
from PIL.ExifTags import TAGS
import random

import Algo_uno as uno
import Algo_dos as dos
import Algo_tres as tres
import numpy as np

def createRandomSequence(n):
    sequence = "";
    for i in range(n):
        x = random.randint(1,4) #Si je veux rajouter des _ je dois jsute augmenter à 5
        if x ==1:
            sequence += 'A'
        elif x ==2:
            sequence += 'T'
        elif x ==3:
            sequence += 'C'
        elif x == 4:
            sequence += 'G'
        else:
            sequence += '_'
    return sequence

def printMatrice(type, M):
    if type == 'score':
        print("   A T C G _")
        print("A ",M[0][0], M[0][1], M[0][2], M[0][3], M[0][4])
        print("T ",M[1][0], M[1][1], M[1][2], M[1][3], M[1][4])
        print("C ",M[2][0], M[2][1], M[2][2], M[2][3], M[2][4])
        print("G ",M[3][0], M[3][1], M[3][2], M[3][3], M[3][4])
        print("_ ",M[4][0], M[4][1], M[4][2], M[4][3], M[4][4])

def main():
    # -------------------- PARTIE MODIFIABLE -----------------------
    # Pour modifier les tests il suffis juste de modifier les valeurs ci-dessous
    # Les test 2 et 3 ne sont pas fait pour être rouler en même temps car n°2
    # veux une différence dans les tailles alors que n°3 veux des tailles similaire
    test_algo_uno = False
    test_algo_dos = True
    test_algo_tre = False
    taille_S = 40
    taille_T = 10
    nb_iteration = 10  # On répète k fois un algo pour avoir un temps moyenne et donc une mesure moins imprécise
    c_gap = 3 #Pour le test dos
    """
    score =   A T C G _
            A 0 1 1 1 1
            T 1 0 1 1 1
            C 1 1 0 1 1
            G 1 1 1 0 1
            _ 1 1 1 1 0
    """

    score = np.array([[0, 1, 1, 1, 1],
                      [1, 0, 1, 1, 1],
                      [1, 1, 0, 1, 1],
                      [1, 1, 1, 0, 1],
                      [1, 1, 1, 1, 0]])
    dict_score = { ("A", "A"):0, ("T", "A"):1, ("C", "A"):1, ("G", "A"):1, ("_", "A"):1,
                   ("A", "T"):1, ("T", "T"):0, ("C", "T"):1, ("G", "T"):1, ("_", "T"):1,
                   ("A", "C"):1, ("T", "C"):1, ("C", "C"):0, ("G", "C"):1, ("_", "C"):1,
                   ("A", "G"):1, ("T", "G"):1, ("C", "G"):1, ("G", "G"):0, ("_", "G"):1,
                   ("A", "_"):1, ("T", "_"):1, ("C", "_"):1, ("G", "_"):1, ("_", "_"):0}
    # ------------------ Fin des variable modifiable -----------------------------
    # ATTENTION si on veut modifier le score il faut modifier les 2 variables de score ensemble.

    print("Initialisation des séquences")

    sequence_S =  createRandomSequence(taille_S)
    sequence_T = createRandomSequence(taille_T)
    print("Sequences créées")
    print("Selon la matrice de score : ")
    printMatrice('score', score)
    print("Sur ", nb_iteration," itérations, avec |S| = ",taille_S, " et |T| = ", taille_T)

    if test_algo_uno:
        """
        Pour avoir une mesure plus précise on répète plusieur fois l'algo, le résultat et le nombre d'opération
        ne changera pas car il n'y a pas d'aléa dans mon algorithme, mais le temps peux varier pour diverses raisons
        """
        algo_simple = uno.Algo_uno(sequence_S, sequence_T, score, dict_score)
        # Algo minimum non opti
        print("Début de l'algo minimum_general_non_optimise:")
        temps_moyen_non_opti = 0
        resultat_n = 0
        operation_n = 0

        for i in range(1):
            resultat, temps, operation = algo_simple.minimum_general_non_optimise()
            resultat_n = resultat
            operation_n = operation
            temps_moyen_non_opti += temps
        temps_moyen_non_opti = temps_moyen_non_opti/1

        #Algo minimum opti
        print("Début de l'algo minimum_general_optimise:")
        temps_moyen_opti = 0
        resultat_opti = 0
        operation_opti = 0
        for i in range(nb_iteration):
            resultat, temps, operation = algo_simple.minimum_general_optimise()
            resultat_opti = resultat
            operation_opti = operation
            temps_moyen_opti += temps
        temps_moyen_opti = temps_moyen_opti / nb_iteration
        ##Conclusion, présentation des résultats
        print("---------------- Resultat ----------------")
        print("              Non Opti          |     Opti   ")
        print("Temps :     ", temps_moyen_non_opti, "| ", temps_moyen_opti)
        print("Operation : ", operation_n, "          | ", operation_opti)
        print("Distance:   ", resultat_n, "             | ", resultat_opti)

    if test_algo_dos:
        if(taille_S == taille_T) | (taille_S >= taille_T + c_gap):
            algo_gap = dos.Algo_dos(sequence_S, sequence_T, dict_score, c_gap)
            # Algo minimum opti
            print("Début de l'algo minimum_general_optimise:")
            temps_moyen_gap = 0
            resultat_gap = 0
            for i in range(nb_iteration):
                resultat, temps = algo_gap.minimum_general_c_gap()
                resultat_gap = resultat
                temps_moyen_gap += temps
            temps_moyen_gap = temps_moyen_gap / nb_iteration
            ##Conclusion, présentation des résultats
            print("---------------- Resultat ----------------")
            print("Temps :     ", temps_moyen_gap)
            print("Distance:   ", resultat_gap)
            print("\n Voici la matrice résultante :")
            print(algo_gap.matrice)

    if test_algo_tre:
        """
        Pour avoir une mesure plus précise on répète plusieur fois l'algo, le résultat et le nombre d'opération
        ne changera pas car il n'y a pas d'aléa dans mon algorithme, mais le temps peux varier pour diverses raisons
        """
        # Algo minimum non opti
        print("Début de l'algo minimum_general_optimise:")
        algo_simple = uno.Algo_uno(sequence_S, sequence_T, score, dict_score)
        temps_moyen_opti = 0
        resultat_opti = 0
        operation_opti = 0

        for i in range(nb_iteration):
            resultat, temps, operation = algo_simple.minimum_general_optimise()
            resultat_opti = resultat
            operation_opti = operation
            temps_moyen_opti += temps
        temps_moyen_opti = temps_moyen_opti / nb_iteration

        # Algo minimum opti
        print("Début de l'algo d'approximation:")
        algo_approx = tres.Algo_tres(sequence_S, sequence_T, dict_score, 4, 4, 50, 100)
        temps_moyen_approx = 0
        resultat_approx = 0
        operation_approx = 0
        for i in range(nb_iteration):
            resultat, temps, operation = algo_approx.minimum_approximation_global()
            resultat_approx = resultat
            operation_approx = operation
            temps_moyen_approx += temps
        temps_moyen_approx = temps_moyen_approx / nb_iteration
        ##Conclusion, présentation des résultats
        print("---------------- Resultat ----------------")
        print("                  Approx          |     Opti   ")
        print("Temps :     ", temps_moyen_approx, "| ", temps_moyen_opti)
        print("Operation : ", operation_approx, "          | ", operation_opti)
        print("Distance:   ", resultat_approx, "             | ", resultat_opti)

if __name__ == "__main__":
    main()

